[{"/Users/kevinliaoo/Documents/Twittor/frontend/src/index.js":"1","/Users/kevinliaoo/Documents/Twittor/frontend/src/store.js":"2","/Users/kevinliaoo/Documents/Twittor/frontend/src/App.js":"3","/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Login.jsx":"4","/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Home.jsx":"5","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Layout.jsx":"6","/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Register.jsx":"7","/Users/kevinliaoo/Documents/Twittor/frontend/src/config.js":"8","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Post.jsx":"9","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/NewPost.jsx":"10","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Header.jsx":"11","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Postslist.jsx":"12","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Navbar.jsx":"13","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Search.jsx":"14","/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Profile.jsx":"15"},{"size":479,"mtime":1611166350836,"results":"16","hashOfConfig":"17"},{"size":1727,"mtime":1611793045443,"results":"18","hashOfConfig":"17"},{"size":766,"mtime":1611412945764,"results":"19","hashOfConfig":"17"},{"size":2910,"mtime":1611792607895,"results":"20","hashOfConfig":"17"},{"size":1891,"mtime":1611792618653,"results":"21","hashOfConfig":"17"},{"size":213,"mtime":1611159887251,"results":"22","hashOfConfig":"17"},{"size":3906,"mtime":1611753592117,"results":"23","hashOfConfig":"17"},{"size":1293,"mtime":1611793550032,"results":"24","hashOfConfig":"17"},{"size":1774,"mtime":1611274389461,"results":"25","hashOfConfig":"17"},{"size":2552,"mtime":1611759768394,"results":"26","hashOfConfig":"17"},{"size":403,"mtime":1611276051615,"results":"27","hashOfConfig":"17"},{"size":666,"mtime":1611705360711,"results":"28","hashOfConfig":"17"},{"size":1330,"mtime":1611793008316,"results":"29","hashOfConfig":"17"},{"size":633,"mtime":1611279659811,"results":"30","hashOfConfig":"17"},{"size":2498,"mtime":1611793871768,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"10os2eg",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kevinliaoo/Documents/Twittor/frontend/src/index.js",[],["67","68"],"/Users/kevinliaoo/Documents/Twittor/frontend/src/store.js",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/App.js",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Login.jsx",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Home.jsx",["69"],"/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Layout.jsx",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Register.jsx",["70"],"import React, { useState, useEffect } from 'react'; \nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport config from '../config';\n\nimport '../assets/styles/pages/Login.css';\n\nconst Register = props => {\n    const [form, setValues] = useState({\n        firstName: '', \n        lastName: '', \n        username: '', \n        password: '', \n        repeatPsw: '',\n    })\n\n    const handleInput = event => {\n        setValues({\n            ...form, \n            [event.target.name]: event.target.value, \n        })\n    }\n    const goBack = () => props.history.push('/login');\n    const handleSubmit = event => {\n        event.preventDefault();\n        axios.post(`${config.host_URL}/api/users`, form)\n            .then(response => {\n                props.history.push('/login');\n                alert('User created succesfully')\n            })\n            .catch(e => {\n                // e.response.data.body\n                console.log(e.response.data.body)\n                alert('Error')\n            })\n    }\n    // Checks if all fields of the form is completed\n    const checkAllFieldsCompleted = () => {\n        const hasValue = Object.values(form).map(value => value.length > 0)\n        let res = 0; \n        hasValue.map(val => val===true ? res++ : '');\n        return res === 5;\n    }\n    useEffect(() => {\n        const registerButton = document.getElementById('registerbtn'); \n        if(checkAllFieldsCompleted()) {\n            registerButton.disabled = false; \n            registerButton.style.backgroundColor = config.colors.enabledButton; \n        } else {\n            registerButton.disabled = true; \n            registerButton.style.backgroundColor = config.colors.disabledButton;\n        }\n    }, [form])\n    return (\n        <>\n            <section className=\"formContainer\">\n                <h2 className=\"title\">Create your account</h2>\n                <form className=\"form\" onSubmit={handleSubmit}>\n                    <input \n                        className = 'input'\n                        type = \"text\"\n                        name = \"firstName\" \n                        placeholder = \"First name: \"\n                        onChange = {handleInput}\n                    />\n                    <input \n                        className = 'input'\n                        type = \"text\"\n                        name = \"lastName\" \n                        placeholder = \"Last name: \"\n                        onChange = {handleInput}\n                    />\n                    <input \n                        className = 'input'\n                        type = \"text\"\n                        name = \"username\" \n                        placeholder = \"Username: \"\n                        onChange = {handleInput}\n                    />\n                    <input \n                        className = 'input'\n                        type = \"password\"\n                        name = \"password\" \n                        placeholder = \"Password: \"\n                        onChange = {handleInput}\n                    />\n                    <input \n                        className = 'input'\n                        type = \"password\"\n                        name = \"repeatPsw\" \n                        placeholder = \"Repeat password: \"\n                        onChange = {handleInput}\n                    />\n                    <button className=\"registerbtn\" id=\"registerbtn\">\n                        Register\n                    </button>\n                    <button className=\"cancelbtn\" onClick={goBack}>\n                        Cancel\n                    </button>\n                </form>\n            </section>\n        </>\n    )\n}\n\nconst mapDispatchesToProps = dispatch => ({\n    registerRequest(payload) {\n        dispatch({\n            type: 'REGISTER_REQUEST',\n            payload\n        })\n    }, \n}); \n\nexport default connect(null, mapDispatchesToProps)(Register);","/Users/kevinliaoo/Documents/Twittor/frontend/src/config.js",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Post.jsx",["71"],"import React from 'react'; \n\nimport config from '../config';\n\nimport '../assets/styles/components/Post.css';\n\nconst Post = props => {\n    const goToPost = ev => {\n\n    }\n    const likePost = ev => {\n        console.log(\"Send like request\")\n    }\n    // El contenido de cada post dsps lo tengo que cambiar cuando pueda hacer peticiones\n    return(\n        <>\n            <div className=\"postcontent\">\n                <div className=\"maincontent\">\n                    <div className=\"maincontent__image\">\n                        <img className=\"profilepicture\" src={props.pictureURL}/>\n                    </div>\n                    <div className=\"separator\">\n                        <div className=\"maincontent__maindata\">\n                            <p className=\"name\">{`${props.firstName} ${props.lastName}`}</p>\n                            <p className=\"username\">{`@${props.username} Â·`}</p> \n                            <p className=\"time\">21mins</p>\n                        </div>  \n                        <div className=\"maincontent__content\">\n                            {props.content}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"postactions\">\n                    <div className=\"like\" onClick={likePost}>\n                        <img src={config.images_URLs.like} alt=\"Like button\" />\n                        <p className=\"likesnumber\">6</p>\n                    </div>\n                    <div className=\"comment\" onClick={goToPost}>\n                        <img src={config.images_URLs.comments} alt=\"Comment button\" />\n                        <p className=\"commentsnumbers\">9</p>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Post;","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/NewPost.jsx",["72"],"import React from 'react'; \nimport axios from 'axios';\n\nimport config from '../config';\n\nimport '../assets/styles/components/NewPost.css';\nimport { connect } from 'react-redux';\n\nclass NewPost extends React.Component {\n    constructor(props) {\n        super(props); \n        this.state = {};\n    }\n\n    componentDidMount() {\n        const twitButton = document.getElementById('twitbutton'); \n        twitButton.disabled = true;\n        twitButton.style.backgroundColor = config.colors.disabledButton;\n    }\n\n    handleClick() {\n        const input = document.getElementById('content__input'); \n        const { user } = this.props;\n        const config_ = {\n            headers: { Authorization: `Bearer ${this.props.jwt}` }\n        }; \n        const bodyParameters = {\n            uid: user._id, \n            content: input.value\n        };\n        const URL = `${config.host_URL}/api/posts/`;\n        axios.post(URL, bodyParameters, config_)\n            .then(res => {\n                input.value = \"\"; \n                alert('New post posted');\n            })\n            .catch(e => console.log(e))\n    }\n\n    handleTextarea() {\n        const textarea = document.getElementById('content__input'); \n        const twitButton = document.getElementById('twitbutton'); \n        if(textarea.value.length > 0) {\n            twitButton.disabled = false;\n            twitButton.style.backgroundColor = config.colors.enabledButton;\n        } else {\n            twitButton.disabled = true;\n            twitButton.style.backgroundColor = config.colors.disabledButton;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"newpost\">\n                <div className=\"newpost__content\">\n                    <img className=\"newpost__profilepic\" src={config.images_URLs.user} alt=\"Profile picture\" />\n                    <textarea \n                        className = \"content__input\" \n                        id = \"content__input\"\n                        type = \"text\" \n                        placeholder = \"What do you want to say?\"\n                        onChange = {this.handleTextarea}\n                    />\n                </div>\n                <div className=\"buttons\">\n                    <button id=\"twitbutton\" className=\"twitbutton\" onClick={this.handleClick.bind(this)}>\n                        Twit\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    jwt: state.jwt,\n    user: state.user,\n})\n\nexport default connect(mapStateToProps, null)(NewPost);","/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Header.jsx",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Postslist.jsx",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Navbar.jsx",[],"/Users/kevinliaoo/Documents/Twittor/frontend/src/components/Search.jsx",["73"],"import React from 'react'; \nimport { Link } from 'react-router-dom';\n\nimport config from '../config';\n\nimport '../assets/styles/components/Search.css';\n\nconst Search = () => {\n    return (\n        <div className=\"searchsection\">\n            <form className=\"searchbar\">\n                <input \n                    className = \"searchuser\"\n                    placeholder = \"Search on Twittor\"\n                /> \n                <button>\n                    <img className=\"searchbutton\" src={config.images_URLs.search} alt=\"Search icon\" />\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default Search;","/Users/kevinliaoo/Documents/Twittor/frontend/src/pages/Profile.jsx",["74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":39,"column":7,"nodeType":"81","messageId":"82","endLine":39,"endColumn":12},{"ruleId":"83","severity":1,"message":"84","line":54,"column":8,"nodeType":"85","endLine":54,"endColumn":14,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":20,"column":25,"nodeType":"89","endLine":20,"endColumn":81},{"ruleId":"90","severity":1,"message":"91","line":56,"column":21,"nodeType":"89","endLine":56,"endColumn":112},{"ruleId":"79","severity":1,"message":"92","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":31,"column":21,"nodeType":"89","endLine":35,"endColumn":23},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Homee' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkAllFieldsCompleted'. Either include it or remove the dependency array.","ArrayExpression",["95"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donât need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Update the dependencies array to be: [checkAllFieldsCompleted, form]",{"range":"98","text":"99"},[1731,1737],"[checkAllFieldsCompleted, form]"]